{"message":"@lrq3000 you don't need to clear bars that arn't using this file.\n\n```\nbars = [for inst in cls._instances if inst.fp == file]\n```\n"}
{"message":"Yep you're right, thank's. There wasn't this multi-file management feature before in tqdm when I did the PR. Casper seems to have included your change in #150.\n"}
{"message":"A bit convoluted to use the same variable self.cursor, but ok, I see what you wanted to do. Maybe you should set default `n=-1` to be consistent with [Python io lib](https://docs.python.org/2/library/io.html#io.RawIOBase.read)?\n"}
{"message":"@lrq3000 Should this be indented like this or moved one line before the code?\n"}
{"message":"This is intended like this to explicitly explain that we don't preprocess strings. This comment can be removed as it can be deduced from reading other conditions, but I like to be explicit.\n"}
{"message":"I call this the \"ghost else\" (I made it up): it often happens that else conditions are not explicitly set but implicitly, but the other conditions are designed with this implicit \"ghost else\" in mind. So in these cases, I add a comment to explain what the \"ghost else\" is meant to do.\n"}
{"message":"@lrq3000 yes, but should it be moved to before... wait the code changed... but it didn't... I don't know what drug I was on when I reviewed that. Damn.\n"}
{"message":"755-758 & 848-851 duplicate code\n"}
{"message":"Can't work around this @CrazyPython, `__iter__()` is a duplication of `update()` for performance maximization.\n"}
{"message":"@lrq3000 what about `__iter__ = update`, or the other way around?\n"}
{"message":"We tried everything we could imagine, including what you propose, and it lowers drastically the performance of `__iter__()`.\n\nI think there is no way around, `__iter__()` is super efficient because once it's launched it works in its own virtual routine with minimal calls to external functions (see how most `self` variables are stored in method's local variables before the for loop), so any attempt to unify `__iter__` and `update` is bound to fail IMO (except maybe if you're a Python wizard and you dynamically rewrite the method on first call depending on whether it's `__iter__` that was called or not, but then I think it would be way more complex to maintain than simple code duplication).\n"}
{"message":"@lrq3000 \n\n> virtual routine with minimal calls to external functions\n\nmind blown. Where'd you learn this much about python internals?\n"}
{"message":"`copy.deepcopy()`? And `__iter__ = update` in the class scope.\n"}
{"message":"Er, I learnt through trials and errors mostly (and because I myself tried to unify `__iter__()` and `update()`, and I spent a long time...).\n\nYes copying the method is not the most difficult part, the difficult part is to dynamically rewrite all statements that use instance variables to use local variables instead. I think if we go down this road that this should be done by modifying the AST to preserve efficiency (so that it gets rewritten once at class instanciation). But then that's really a lot of work just to avoid one method duplication...\n"}
{"message":"@lrq3000 I believe you. But what specific places can I personally learn more? \n"}
{"message":"@CrazyPython Ah this is not easy to tell you... My current knowledge is a mix of several things, but mainly three sources: my own desire to program tools that can be useful to me, internet (with great resources such as StackOverflow!) to help get past issues or get to know more tricks (blog posts are also good), and university courses for theoretical stuff (like concurrent programming, this is not something you can usually learn by yourself on a fun spare-time project). And I am still learning almost everyday.\n\nBut really, the most important thing I think is just to try to make your own projects, that are useful to you. This is the only way to be willing to spend hours and hours fixing problems and hitting walls: the reward of having a software that will save you time later on, or enable you to do something that was impossible to do manually. This is nowadays called the project-based approach to learning, but it's really not new and is the same as the old saying \"practice makes perfect\".\n"}
{"message":"So just find a purpose to make a program of your own, and continue. The goal is not to learn to program, but simply to achieve a program that works for your needs. In the end, you will progress a lot. And this works at any proficiency level, I am still learning everyday in the languages I master the most.\n"}
{"message":"@lrq3000 Ah yes, I follow this myself. Project-based learning is what I tell others. Nice to see someone else shares my opinion. :)\n\nBut I'm asking specifically: how did you learn about Python internals, specifically? trial and error? profiling?\n"}
{"message":"Ah then it's also the same way: i had University courses on compilers,\nwhich apply to pretty much any language even if python generates bytecodes\ninstead of a binary, then i also did my own projects like profiling as you\nsaid (see my easy-profilers repo) and benchmarking for tqdm (see the\nbytecode analysis PR), and finally a lot of SO and blog posts, the most\nuseful being the PyPy blog, they even detail a tutorial to make your own\npython compiler. There were also a few very interesting pure Python\noptimizers with tutorials, i can dig them out if you are interested.\n"}
{"message":"is L1052 sufficient despite the warning on L1051?"}
{"message":"Oh, I totally missed the comment! All the unit tests pass fine and my own test scripts too, so I don't know nor remember at all why sp couldn't be relied on. I'm going to use git blame and git pickaxe to trace back this comment and see whether I can get more info."}
{"message":"should be done using a custom bar_format"}
{"message":"again, use cutom bar_format"}
{"message":"@blaz62746, could you explain your changes L293-305?"}
{"message":"this will force an attempt at unicode on systems which do not support it. to force unicode, please use `ascii=False` instead (which also looks better/smoother)"}
{"message":"this will remove smooth unicode bar support. regression"}
{"message":"removes race condition bugfix. regression"}
{"message":"only if enough people vote for this"}
{"message":"@blaz62746 any reason you remove checking fro `__len__`?"}
{"message":"please use `dynamic_ncols=False` instead"}
{"message":"code dupliation. regression"}
{"message":"I inserted spaces so the printed text would be more viewable (I don't know if I even used existing word in English since English is not my native language...I hope you understand)"}
{"message":"I wanted more detailed percentage number because I need it for big number of iterations"}
{"message":"I just replaced \"#\" with this sign because it looks better on my system, didn't know how it works on another systems"}
{"message":"I believe blaz has  a valid point.  Yes, you can use a completely custom bar, but I don't think you can overload that part of the left bar with a different sub-format. If you can, you (tqdm team) might want to add a FAQ type thing for that."}
{"message":"If you're making these changes for your own use only, don't make a \"pull request\" to merge it with master.  You can branch it and make changes and periodically merge the new changes to master into YOUR copy of the repo."}
{"message":"(that was something that you added in the last couple of months. He was working off an old master version)"}
{"message":"To be honest, I don't remember why I removed it. I only know that I've been making changes on tqdm 4.7.4 and then transfering them on 4.11.2."}
{"message":"@MPagel I opened the PR based on the file @blaz62746 uploaded in an issue. It's good that we have a PR though because it highlights how people may get confused about `tqdm` usage. But yet, @blaz62746 if you absolutely want to implement these non-standard changes into your own version of `tqdm` then you should fork this repo and make your changes in your fork. Then you can easily merge in new changes from our repo when needed - and if you ever feel the need open a PR."}
{"message":"@MPagel, yes, see https://github.com/tqdm/tqdm/pull/381#issuecomment-301256869"}
{"message":"@casperdcl why move the monitor exit inside the lock? It might work but did you try out? Because IIRC, I tried to put any action involving the monitor outside of locks, else the monitor might stuck everything (but I tell that by memory, I did not try this code)."}
{"message":"Related to comment below"}
{"message":"@lrq3000 happy with this?"}
{"message":"yes :-) thanks!"}
{"message":"@kalefranz you OK with this?"}
{"message":"I'd make a custom warning, so that it can be specifically disabled without disabling all `RuntimeWarning`s.\r\n\r\n```python\r\nclass TqdmDisabledMonitorWarning(RuntimeWarning):\r\n    \"\"\"Warned when the tqdm update interval monitor is disabled because of system limitations.\"\"\"\r\n```\r\n\r\nAnd then, in application code, I'd just import the warning, and add\r\n\r\n```python\r\nwarnings.simplefilter('ignore', TqdmDisabledMonitorWarning)\r\n```\r\n\r\nThe alternative is forcing applications to disable all `RuntimeWarning` which I don't think is what you want as a library author.  By inheriting from `RuntimeWarning` instead of just `Warning` though, you allow users that flexibility if they want it."}
{"message":"Thanks @mbargull good spot - but I still get\r\n\r\n```bash\r\ntqdm (fix-tmonitor-termination)$ nosetests -d -v tqdm/tests/tests_synchronisation.py\r\ntests_synchronisation.test_monitoring_thread ... FAIL                       \r\n                                                                            \r\n======================================================================         \r\nFAIL: tests_synchronisation.test_monitoring_thread                          \r\n----------------------------------------------------------------------         \r\nTraceback (most recent call last):                                          \r\n  File \"~/py2/local/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\r\n    self.test(*self.arg)                                                    \r\n  File \"tqdm/tqdm/tests/tests_synchronisation.py\", line 144, in test_monitoring_thread\r\n    assert t2.miniters == 500  # check that t2 was not adjusted             \r\nAssertionError:                                                             \r\n    assert  50%|#####     | 501/1000 [49:59:27<49:47:28, 359.22s/it].miniters == 1  # check that monitor corrected miniters\r\n>>  assert  50%|#####     | 501/1000 [49:59:27<49:47:28, 359.22s/it].miniters == 500  # check that t2 was not adjusted\r\n                                                                               \r\n                                                                            \r\n----------------------------------------------------------------------      \r\nRan 1 test in 30.021s                                                       \r\n                                                                               \r\nFAILED (failures=1)\r\n```"}
{"message":"https://stackoverflow.com/questions/510972/getting-the-class-name-of-an-instance-in-python/16293038#16293038"}
{"message":"This isn't a great way to check this (though this does look like a bug in tqdm to me).\r\n\r\nE.g., the real `sys.stdout` on py2 will happily accept `u\"\"`, but blow up on any actual non-ASCII unicode.\r\n\r\nSeems to me that this is another instance of code that should be taking native strings, or else if it insists on writing unicode, yeah, it can't be writing unicode to sys.stdout/sys.stderr on py2."}
{"message":"But `print u'\\u2588'` works fine on python2"}
{"message":"wow"}
{"message":"@FichteFoll @RedBug312 are you sure this is meant to be `east_asian_width(ch) in 'FW'`? Shouldn't we also check for half-width chars? and are there longer than double-width too?"}
{"message":"Half-width are the standard width for console output. We only need to check full-width and wide.\r\nI'm not aware of wider glyphs."}
{"message":"@altendky just checking - do you think we need to hassle `encoding` here as with `SimpleTextIOWrapper`? I don't think we do."}
{"message":"I don't think you should use `@wraps` here. This is a separate file-like object with its own write method."}
{"message":"Should it be called `.wrap_file()`?"}
{"message":"You can move the context manager functionality into `CallbackIOWrapper` and you won't need two methods here.\r\n```python\r\ndef __enter__(self):\r\n    return self\r\n```"}
{"message":"given the `__get/setattr__` on the underlying `_wrapped` object I think it's fair to use `@wraps` though."}
{"message":"given this some more thought - I think you're right; now that I've abstracted most of the logic to `CallbackIOWrapper` the instance method convenience function is not required (it takes the same number of lines of code to use). This also gets rid of the annoying `close=True`, name clash, and generally seems cleaner."}
{"message":"I was going for\r\n\r\n1. something which looks like the built-in naming syntax `getattr`, `setattr`\r\n2. something which wraps generic objects (files, streams, etc) so perhaps `.wrap_obj` or `.wrap_stream`"}
{"message":"Should probably at least document that it doesn't work for generators or anything else that doesn't work with `len()`?"}
{"message":"At first glance, no.  The purpose here isn't to encode but simply to let you have a chance to see how much stuff is going through."}
{"message":"this file really isn't required - it's just a re-implementation rather than a test."}
{"message":"Yeah, it basically is. Do you recommend any other way to add a test for this?"}
{"message":"If you take a look at the upstream branch I've added https://github.com/tqdm/tqdm/commit/57ecc68afa82aea8d147661cd12a709696c3efef. I suppose you could check that the output includes a small stable subset of options. The only super essential ones I think are (`--help`, `--desc`, `--total`, `--leave`, `--ncols`, `--ascii`, `--dynamic_ncols`, `--position`, `--bytes`, `--nrows`, `--delim`, `--manpath`, `--comppath`)."}
{"message":"Added a new test with the subset of options.\r\nIt's an extension of `test_comppath()`, if it looks fine, maybe we can club the two to remove some of the redundant code."}
{"message":"Except for this line, all changes in this commit do not change the output of the previous version of `tqdm` if `position` is positive. \r\nI am not sure why `pos=0` was used here instead of `pos=pos` even when the position is positive. To completely preserve previous output, this line could be made\r\n`self.display(pos=min(0,pos))`"}
{"message":"this seems dangerous as a user would not expect their explicit `total` to be overridden"}
{"message":"basically see https://github.com/tqdm/tqdm/issues/689#issuecomment-651259944"}
{"message":"I gotcha, however, this will prevent a progress bar from appearing unless a total is explicitly defined when using initial.  Possible fix is to add more logic to check if the user explicitly defined total before overriding.  Lmk if you want me to implement this."}
{"message":"I think it's best to wait and see if anyone requests that feature. For now I think it's safe to assume\r\n\r\n- most people using `initial` will also specify `total`\r\n- most people trying to use `initial` without a `total` will quickly try adding `total` (e.g. https://github.com/tqdm/tqdm/issues/689#issue-416724068)"}
{"message":"woops; nice catch."}
{"message":"Is this only ever triggered exactly once when training is resumed? Or are there any other circumstances?"}
{"message":"why is this needed?"}
{"message":"Yes, exactly once. I don't figure out other circumstances. "}
{"message":"To avoid re-assigning the total when it is provided manually by the user. "}
{"message":"Since this result came from external API I would assert 'result' and 'message_id' exists before accessing them.\r\nExample for a possible error: authentication failure."}
{"message":"I guess you intended to initialize '_message_id' property using this line, while it works, I think it can be clearer.\r\nI would suggest a minor modification to avoid Codacy flag this as \"Statement seems to have no effect\" and \"Access to member '_message_id' before its definition line 56\".\r\nHere define \"self._message_id = None\" and later instead of \"hasattr(self, '_message_id')\" use \"self._message_id is None\".\r\nI would also put lines 44 to 56 in separate method (named initialize_message_id or a similar name). And I would explicitly call it to make the intension clearer (instead of accessing the message_id preperty).\r\nmessage_id property will also call this method if self._message_id is None\r\n"}
{"message":"Function `tqdm.__init__` refactored with the following changes:\n- Replace if statement with if expression ([`assign-if-exp`](https://github.com/sourcery-ai/sourcery/wiki/Current-Refactorings#assign-if-exp))\n- Simplify logical expression using De Morgan identities ([`de-morgan`](https://github.com/sourcery-ai/sourcery/wiki/Current-Refactorings#de-morgan))\n\nThis removes the following comments ( [why?](https://github.com/sourcery-ai/sourcery/wiki/FAQ#comment-removal) ):\n```\n# mark fixed positions as negative\n```\n"}
{"message":"Function `tqdm.__iter__` refactored with the following changes:\n- Replace yield inside for loop with yield from ([`yield-from`](https://github.com/sourcery-ai/sourcery/wiki/Current-Refactorings#yield-from))"}
{"message":"technically looks best on a dark theme.\r\n\r\nWould be great if there was an equally fine-grained alternative that worked well on both dark & light themes."}
{"message":"Yes, it's called “don't use emoji” 😄 "}
{"message":"I've been also trying to find some elegant solution without success. 🙃 "}
{"message":"would you vote to revert this?"}
{"message":"Yes, I would prefer to be consistent (i.e. Unicode–only) on all the supported `contrib` platforms until we find a better alternative."}
{"message":"well already using something different for `notebook` so not really a problem using built-in emoji I think. Changed to use blue squares :)"}
{"message":"```suggestion\r\n            msg = msg.replace(' ', u'\\u2007')  # fix html space padding\r\n```"}
